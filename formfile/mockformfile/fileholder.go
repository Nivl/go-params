// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/go-params/formfile (interfaces: FileHolder)

// Package mockformfile is a generated GoMock package.
package mockformfile

import (
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockFileHolder is a mock of FileHolder interface
type MockFileHolder struct {
	ctrl     *gomock.Controller
	recorder *MockFileHolderMockRecorder
}

// MockFileHolderMockRecorder is the mock recorder for MockFileHolder
type MockFileHolderMockRecorder struct {
	mock *MockFileHolder
}

// NewMockFileHolder creates a new mock instance
func NewMockFileHolder(ctrl *gomock.Controller) *MockFileHolder {
	mock := &MockFileHolder{ctrl: ctrl}
	mock.recorder = &MockFileHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileHolder) EXPECT() *MockFileHolderMockRecorder {
	return m.recorder
}

// FormFile mocks base method
func (m *MockFileHolder) FormFile(arg0 string) (multipart.File, *multipart.FileHeader, error) {
	ret := m.ctrl.Call(m, "FormFile", arg0)
	ret0, _ := ret[0].(multipart.File)
	ret1, _ := ret[1].(*multipart.FileHeader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FormFile indicates an expected call of FormFile
func (mr *MockFileHolderMockRecorder) FormFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockFileHolder)(nil).FormFile), arg0)
}
